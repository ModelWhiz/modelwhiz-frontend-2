# ModelWhiz Frontend Migration Plan
## Production-Ready Multi-User Frontend with Latest Tech Stack

> **Goal**: Build a lightning-fast, production-ready multi-user ML model evaluation platform using the latest frontend technologies for concurrent users with real-time capabilities.

---

## 🎯 Tech Stack - Latest Versions (2024-2025)

### Core Framework & Build Tool
- **React 19** (Latest - with concurrent features)
- **TypeScript 5.7** (Latest - with new features)
- **Vite 6.0** (Latest - with optimized builds)
- **React Router 7** (Latest - with data loading)

### Styling & UI
- **TailwindCSS 4.0** (Latest - with new engine)
- **ShadCN/UI** (Latest components)
- **Radix UI Primitives** (Headless components)
- **Framer Motion 12** (Latest - optimized animations)

### State & Data Management
- **Zustand 5.0** (Latest - lightweight state)
- **TanStack Query v5** (Latest - server state)
- **React Hook Form 7.51** (Latest - forms)
- **Zod 3.23** (Latest - validation)

### Development & Quality
- **Vite 6.0** (Latest - faster builds)
- **Vitest 2.0** (Latest - testing)
- **ESLint 9** (Latest - flat config)
- **TypeScript 5.7** (Latest features)

### Real-time & Performance
- **Socket.IO Client 4.8** (Real-time updates)
- **React Virtualized** (Large lists)
- **Recharts 2.12** (Latest - charts)
- **Lucide React** (Latest - icons)

---

## 📋 Complete Implementation Steps

## PHASE 1: PROJECT FOUNDATION (Days 1-2)

### Step 1.1: Environment Setup
```bash
# Create project with latest Vite
npm create vite@latest modelwhiz-frontend -- --template react-ts
cd modelwhiz-frontend

# Remove default files we won't use
rm -rf src/App.css src/index.css src/assets

# Create complete folder structure
mkdir -p src/{components/{ui,charts,layout,forms,model,common},pages,hooks,stores,services,types,utils,styles,assets/{icons,images}}
```

### Step 1.2: Install All Dependencies (Latest Versions)
```json
{
  "name": "modelwhiz-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext ts,tsx --fix",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "analyze": "npx vite-bundle-analyzer dist/stats.html",
    "clean": "rm -rf dist node_modules/.vite"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.0.0",
    "@tanstack/react-query": "^5.56.0",
    "@tanstack/react-query-devtools": "^5.56.0",
    "zustand": "^5.0.0",
    "axios": "^1.7.0",
    "zod": "^3.23.0",
    "react-hook-form": "^7.51.0",
    "@hookform/resolvers": "^3.9.0",
    "framer-motion": "^12.0.0",
    "sonner": "^1.5.0",
    "cmdk": "^1.0.0",
    "socket.io-client": "^4.8.0",
    "recharts": "^2.12.0",
    "lucide-react": "^0.454.0",
    "react-dropzone": "^14.2.0",
    "react-virtual": "^2.10.0",
    "date-fns": "^4.1.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.5.0",
    "class-variance-authority": "^0.7.0",
    "vaul": "^1.0.0",
    "react-resizable-panels": "^2.1.0",
    "@radix-ui/react-alert-dialog": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-badge": "^1.0.0",
    "@radix-ui/react-button": "^1.0.0",
    "@radix-ui/react-card": "^1.0.0",
    "@radix-ui/react-dialog": "^1.1.0",
    "@radix-ui/react-dropdown-menu": "^2.1.0",
    "@radix-ui/react-form": "^0.1.0",
    "@radix-ui/react-input": "^1.0.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.0",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-select": "^2.1.0",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-skeleton": "^1.0.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.0",
    "@radix-ui/react-tooltip": "^1.1.0"
  },
  "devDependencies": {
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "@vitejs/plugin-react": "^4.3.0",
    "vite": "^6.0.0",
    "typescript": "^5.7.0",
    "tailwindcss": "^4.0.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    "@types/node": "^22.0.0",
    "eslint": "^9.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "@eslint/js": "^9.0.0",
    "globals": "^15.0.0",
    "vitest": "^2.0.0",
    "@vitest/ui": "^2.0.0",
    "jsdom": "^25.0.0",
    "@testing-library/react": "^16.0.0",
    "@testing-library/jest-dom": "^6.5.0",
    "vite-bundle-analyzer": "^0.11.0",
    "vite-plugin-pwa": "^0.20.0",
    "workbox-window": "^7.1.0"
  }
}
```

### Step 1.3: Configuration Files Setup

#### vite.config.ts (Optimized for Performance)
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'
import path from 'path'

export default defineConfig({
  plugins: [
    react({
      // React 19 optimizations
      babel: {
        plugins: [
          ['babel-plugin-react-compiler', {}]
        ]
      }
    }),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png'],
      manifest: {
        name: 'ModelWhiz - ML Model Dashboard',
        short_name: 'ModelWhiz',
        description: 'Professional ML Model Evaluation Platform',
        theme_color: '#8b5cf6',
        background_color: '#ffffff',
        display: 'standalone',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      }
    })
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  build: {
    // Optimized build configuration
    target: 'esnext',
    minify: 'esbuild',
    cssMinify: true,
    rollupOptions: {
      output: {
        // Manual chunks for optimal loading
        manualChunks: {
          // Core React
          'react-core': ['react', 'react-dom'],
          
          // Routing
          'routing': ['react-router-dom'],
          
          // State Management
          'state': ['zustand', '@tanstack/react-query'],
          
          // UI Components
          'ui-components': [
            '@radix-ui/react-dialog',
            '@radix-ui/react-dropdown-menu',
            '@radix-ui/react-popover',
            '@radix-ui/react-select'
          ],
          
          // Charts (heavy - separate chunk)
          'charts': ['recharts'],
          
          // Forms
          'forms': ['react-hook-form', '@hookform/resolvers'],
          
          // Utilities
          'utils': ['date-fns', 'clsx', 'tailwind-merge'],
          
          // Icons
          'icons': ['lucide-react']
        }
      }
    },
    // Enable source maps for production debugging
    sourcemap: true,
    
    // Optimize chunk size warnings
    chunkSizeWarningLimit: 1000
  },
  server: {
    host: true,
    port: 3000,
    cors: true,
    // Proxy API calls to backend
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
      }
    }
  },
  // Optimize dependencies
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'react-router-dom',
      '@tanstack/react-query',
      'zustand',
      'framer-motion',
      'lucide-react'
    ],
    exclude: [
      'recharts' // Lazy load this heavy dependency
    ]
  },
  // Performance optimizations
  esbuild: {
    // Remove console logs in production
    drop: ['console', 'debugger'],
  }
})
```

#### tailwind.config.js (TailwindCSS v4)
```javascript
import { fontFamily } from "tailwindcss/defaultTheme"

/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    "./index.html",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          50: "#f8f4ff",
          100: "#ede4ff",
          200: "#ddd0ff",
          300: "#c4b1ff",
          400: "#a688ff",
          500: "#8b5cf6",
          600: "#7c3aed",
          700: "#6d28d9",
          800: "#5b21b6",
          900: "#4c1d95",
          950: "#2e1065"
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
          50: "#fdf2f8",
          100: "#fce7f3",
          200: "#fbcfe8",
          300: "#f9a8d4",
          400: "#f472b6",
          500: "#ec4899",
          600: "#db2777",
          700: "#be185d",
          800: "#9d174d",
          900: "#831843"
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["var(--font-sans)", ...fontFamily.sans],
        mono: ["var(--font-mono)", ...fontFamily.mono],
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        "fade-in": {
          from: { opacity: 0 },
          to: { opacity: 1 },
        },
        "slide-in-from-top": {
          from: { transform: "translateY(-100%)" },
          to: { transform: "translateY(0)" },
        },
        "slide-in-from-bottom": {
          from: { transform: "translateY(100%)" },
          to: { transform: "translateY(0)" },
        },
        "slide-in-from-left": {
          from: { transform: "translateX(-100%)" },
          to: { transform: "translateX(0)" },
        },
        "slide-in-from-right": {
          from: { transform: "translateX(100%)" },
          to: { transform: "translateX(0)" },
        },
        "pulse-scale": {
          "0%, 100%": { transform: "scale(1)" },
          "50%": { transform: "scale(1.05)" },
        },
        "shimmer": {
          from: { backgroundPosition: "-200% 0" },
          to: { backgroundPosition: "200% 0" },
        }
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.15s ease-out",
        "slide-in-from-top": "slide-in-from-top 0.2s ease-out",
        "slide-in-from-bottom": "slide-in-from-bottom 0.2s ease-out",
        "slide-in-from-left": "slide-in-from-left 0.2s ease-out",
        "slide-in-from-right": "slide-in-from-right 0.2s ease-out",
        "pulse-scale": "pulse-scale 2s ease-in-out infinite",
        "shimmer": "shimmer 2s linear infinite",
      },
      backgroundImage: {
        "shimmer": "linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent)",
      }
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography"),
    require("@tailwindcss/forms"),
    require("@tailwindcss/aspect-ratio"),
    require("@tailwindcss/container-queries")
  ],
}
```

#### tsconfig.json (TypeScript 5.7)
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["DOM", "DOM.Iterable", "ES6", "ES2022"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": ["vitest/globals", "@testing-library/jest-dom"],
    
    // TypeScript 5.7 new features
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true
  },
  "include": [
    "src",
    "vite.config.ts"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
```

#### eslint.config.js (ESLint 9 - Flat Config)
```javascript
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from '@typescript-eslint/eslint-plugin'
import tsparser from '@typescript-eslint/parser'

export default [
  {
    ignores: ['dist', 'build', 'node_modules', '*.config.js'],
  },
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      globals: globals.browser,
      parser: tsparser,
      parserOptions: {
        ecmaFeatures: { jsx: true },
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
      '@typescript-eslint': tseslint,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/prefer-const': 'error',
      'prefer-const': 'error',
      'no-var': 'error',
    },
  },
]
```

---

## PHASE 2: FOUNDATION ARCHITECTURE (Days 2-3)

### Step 2.1: Global Styles & CSS Variables
#### src/styles/globals.css
```css
@import "tailwindcss";

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 262.1 83.3% 57.8%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 262.1 83.3% 57.8%;
    --radius: 0.75rem;
    --font-sans: 'Inter Variable', 'Inter', system-ui, sans-serif;
    --font-mono: 'JetBrains Mono Variable', 'JetBrains Mono', 'Fira Code', monospace;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 262.1 83.3% 57.8%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 262.1 83.3% 57.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground font-sans;
    font-feature-settings: "rlig" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-muted;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-border rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-accent-foreground/20;
  }
}

@layer utilities {
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-primary-600 to-secondary-600;
  }
  
  .glass {
    @apply bg-white/10 backdrop-blur-md border border-white/20;
  }
  
  .shimmer {
    @apply bg-shimmer animate-shimmer bg-[length:200%_100%];
  }
}
```

### Step 2.2: Core Types & Interfaces
#### src/types/api.ts
```typescript
// API Response Types
export interface ApiResponse<T> {
  data: T
  message?: string
  status: 'success' | 'error'
  timestamp: string
}

export interface PaginatedResponse<T> {
  items: T[]
  total: number
  page: number
  pages: number
  has_next: boolean
  next_cursor?: string
}

export interface ApiError {
  message: string
  code?: string
  statusCode?: number
  details?: Record<string, any>
}

// Task & Job Types for Real-time Updates
export interface TaskProgress {
  task_id: string
  status: 'PENDING' | 'PROCESSING' | 'SUCCESS' | 'FAILURE'
  progress?: number
  message?: string
  result?: any
  error?: string
}
```

#### src/types/models.ts
```typescript
import { z } from 'zod'

// Zod schemas for runtime validation
export const MetricSchema = z.object({
  id: z.number(),
  model_id: z.number(),
  values: z.record(z.number()),
  timestamp: z.string().datetime(),
})

export const ModelSchema = z.object({
  id: z.number(),
  user_id: z.string(),
  name: z.string(),
  version: z.string(),
  filename: z.string(),
  upload_time: z.string().datetime(),
  task_type: z.enum(['classification', 'regression']).optional(),
  latest_metrics: z.record(z.number()).nullable(),
  metrics: z.array(MetricSchema).optional(),
})

export const EvaluationJobSchema = z.object({
  id: z.number(),
  user_id: z.string(),
  model_name: z.string(),
  model_id: z.number(),
  status: z.enum(['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED']),
  task_id: z.string().optional(),
  results: z.record(z.any()).nullable(),
  artifacts: z.record(z.string()).nullable(),
  error_message: z.string().nullable(),
  created_at: z.string().datetime(),
  completed_at: z.string().datetime().nullable(),
})

// TypeScript types
export type Metric = z.infer<typeof MetricSchema>
export type Model = z.infer<typeof ModelSchema>
export type EvaluationJob = z.infer<typeof EvaluationJobSchema>

// Form types
export interface ModelUploadForm {
  modelFile: File
  preprocessorFile?: File
  datasetFile: File
  modelName: string
  targetColumn: string
  splitData: boolean
  hasPreprocessor: boolean
}

// Chart data types
export interface ChartDataPoint {
  name: string
  value: number
  color?: string
  category?: string
}

export interface ComparisonData {
  metric: string
  modelA: number
  modelB: number
  winner?: 'A' | 'B' | 'tie'
}
```

#### src/types/auth.ts
```typescript
import { z } from 'zod'

export const UserSchema = z.object({
  id: z.string(),
  email: z.string().email(),
  name: z.string(),
  avatar_url: z.string().url().optional(),
  created_at: z.string().datetime(),
  last_login: z.string().datetime().optional(),
})

export const LoginSchema = z.object({
  email: z.string().email('Please enter a valid email'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
})

export const SignUpSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/(?=.*[a-z])/, 'Password must contain at least one lowercase letter')
    .regex(/(?=.*[A-Z])/, 'Password must contain at least one uppercase letter')
    .regex(/(?=.*\d)/, 'Password must contain at least one number')
    .regex(/(?=.*[!@#$%^&*])/, 'Password must contain at least one special character'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
})

export type User = z.infer<typeof UserSchema>
export type LoginForm = z.infer<typeof LoginSchema>
export type SignUpForm = z.infer<typeof SignUpSchema>
```

### Step 2.3: State Management Setup (Zustand 5.0)
#### src/stores/authStore.ts
```typescript
import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import type { User, LoginForm, SignUpForm } from '@/types/auth'
import { authService } from '@/services/auth'

interface AuthState {
  // State
  user: User | null
  isAuthenticated: boolean
  isLoading: boolean
  error: string | null
  
  // Actions
  login: (credentials: LoginForm) => Promise<void>
  signUp: (userData: SignUpForm) => Promise<void>
  logout: () => Promise<void>
  checkAuth: () => Promise<void>
  clearError: () => void
}

export const useAuthStore = create<AuthState>()(
  devtools(
    persist(
      immer((set, get) => ({
        // Initial state
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null,

        // Actions
        login: async (credentials) => {
          set((state) => {
            state.isLoading = true
            state.error = null
          })

          try {
            const { user, token } = await authService.login(credentials)
            
            // Store token
            localStorage.setItem('auth_token', token)
            
            set((state) => {
              state.user = user
              state.isAuthenticated = true
              state.isLoading = false
            })
          } catch (error) {
            set((state) => {
              state.error = error instanceof Error ? error.message : 'Login failed'
              state.isLoading = false
            })
            throw error
          }
        },

        signUp: async (userData) => {
          set((state) => {
            state.isLoading = true
            state.error = null
          })

          try {
            const { user, token } = await authService.signUp(userData)
            
            // Store token
            localStorage.setItem('auth_token', token)
            
            set((state) => {
              state.user = user
              state.isAuthenticated = true
              state.isLoading = false
            })
          } catch (error) {
            set((state) => {
              state.error = error instanceof Error ? error.message : 'Sign up failed'
              state.isLoading = false
            })
            throw error
          }
        },

        logout: async () => {
          try {
            await authService.logout()
          } catch (error) {
            console.warn('Logout API call failed:', error)
          } finally {
            // Always clear local state
            localStorage.removeItem('auth_token')
            set((state) => {
              state.user = null
              state.isAuthenticated = false
              state.error = null
            })
          }
        },

        checkAuth: async () => {
          const token = localStorage.getItem('auth_token')
          if (!token) return

          set((state) => {
            state.isLoading = true
          })

          try {
            const user = await authService.getCurrentUser()
            set((state) => {
              state.user = user
              state.isAuthenticated = true
              state.isLoading = false
            })
          } catch (error) {
            // Token might be expired
            localStorage.removeItem('auth_token')
            set((state) => {
              state.user = null
              state.isAuthenticated = false
              state.isLoading = false
            })
          }
        },

        clearError: () => {
          set((state) => {
            state.error = null
          })
        },
      })),
      {
        name: 'auth-storage',
        partialize: (state) => ({
          user: state.user,
          isAuthenticated: state.isAuthenticated,
        }),
      }
    ),
    { name: 'AuthStore' }
  )
)
```

#### src/stores/modelsStore.ts
```typescript
import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import type { Model } from '@/types/models'
import { modelsService } from '@/services/models'

interface ModelsState {
  // State
  models: Model[]
  selectedModel: Model | null
  loading: boolean
  error: string | null
  totalModels: number
  
  // Filters & Search
  searchQuery: string
  taskTypeFilter: 'all' | 'classification' | 'regression'
  sortBy: 'upload_time' | 'name' | 'version'
  sortOrder: 'asc' | 'desc'
  
  // Pagination
  currentPage: number
  hasNextPage: boolean
  nextCursor: string | null
  
  // Actions
  fetchModels: (userId: string, refresh?: boolean) => Promise<void>
  fetchModelById: (id: number) => Promise<void>
  deleteModel: (id: number, userId: string) => Promise<void>
  selectModel: (model: Model | null) => void
  
  // Filters & Search
  setSearchQuery: (query: string) => void
  setTaskTypeFilter: (filter: 'all' | 'classification' | 'regression') => void
  setSortBy: (sortBy: 'upload_time' | 'name' | 'version') => void
  setSortOrder: (order: 'asc' | 'desc') => void
  
  // Pagination
  loadMoreModels: (userId: string) => Promise<void>
  resetPagination: () => void
  
  // Utilities
  clearError: () => void
  reset: () => void
}

export const useModelsStore = create<ModelsState>()(
  devtools(
    immer((set, get) => ({
      // Initial state
      models: [],
      selectedModel: null,
      loading: false,
      error: null,
      totalModels: 0,
      
      // Filters & Search
      searchQuery: '',
      taskTypeFilter: 'all',
      sortBy: 'upload_time',
      sortOrder: 'desc',
      
      // Pagination
      currentPage: 1,
      hasNextPage: false,
      nextCursor: null,
      
      // Actions
      fetchModels: async (userId, refresh = false) => {
        set((state) => {
          state.loading = true
          state.error = null
          if (refresh) {
            state.models = []
            state.currentPage = 1
            state.nextCursor = null
          }
        })
        
        try {
          const { searchQuery, taskTypeFilter, sortBy, sortOrder, nextCursor } = get()
          
          const response = await modelsService.getModels({
            userId,
            search: searchQuery || undefined,
            taskType: taskTypeFilter !== 'all' ? taskTypeFilter : undefined,
            sortBy,
            sortOrder,
            cursor: refresh ? undefined : nextCursor,
            limit: 20,
          })
          
          set((state) => {
            if (refresh) {
              state.models = response.items
            } else {
              state.models.push(...response.items)
            }
            state.totalModels = response.total
            state.hasNextPage = response.has_next
            state.nextCursor = response.next_cursor || null
            state.loading = false
          })
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to fetch models'
            state.loading = false
          })
        }
      },
      
      fetchModelById: async (id) => {
        set((state) => {
          state.loading = true
          state.error = null
        })
        
        try {
          const model = await modelsService.getModelById(id)
          set((state) => {
            state.selectedModel = model
            // Update model in list if it exists
            const index = state.models.findIndex(m => m.id === id)
            if (index !== -1) {
              state.models[index] = model
            }
            state.loading = false
          })
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to fetch model'
            state.loading = false
          })
        }
      },
      
      deleteModel: async (id, userId) => {
        try {
          await modelsService.deleteModel(id, userId)
          set((state) => {
            state.models = state.models.filter(m => m.id !== id)
            if (state.selectedModel?.id === id) {
              state.selectedModel = null
            }
            state.totalModels = Math.max(0, state.totalModels - 1)
          })
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to delete model'
          })
          throw error
        }
      },
      
      selectModel: (model) => {
        set((state) => {
          state.selectedModel = model
        })
      },
      
      // Filters & Search
      setSearchQuery: (query) => {
        set((state) => {
          state.searchQuery = query
        })
      },
      
      setTaskTypeFilter: (filter) => {
        set((state) => {
          state.taskTypeFilter = filter
        })
      },
      
      setSortBy: (sortBy) => {
        set((state) => {
          state.sortBy = sortBy
        })
      },
      
      setSortOrder: (order) => {
        set((state) => {
          state.sortOrder = order
        })
      },
      
      // Pagination
      loadMoreModels: async (userId) => {
        if (!get().hasNextPage || get().loading) return
        await get().fetchModels(userId, false)
      },
      
      resetPagination: () => {
        set((state) => {
          state.currentPage = 1
          state.nextCursor = null
          state.hasNextPage = false
        })
      },
      
      // Utilities
      clearError: () => {
        set((state) => {
          state.error = null
        })
      },
      
      reset: () => {
        set((state) => {
          state.models = []
          state.selectedModel = null
          state.loading = false
          state.error = null
          state.totalModels = 0
          state.searchQuery = ''
          state.taskTypeFilter = 'all'
          state.sortBy = 'upload_time'
          state.sortOrder = 'desc'
          state.currentPage = 1
          state.hasNextPage = false
          state.nextCursor = null
        })
      },
    })),
    { name: 'ModelsStore' }
  )
)
```

#### src/stores/evaluationsStore.ts
```typescript
import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import type { EvaluationJob, ModelUploadForm } from '@/types/models'
import type { TaskProgress } from '@/types/api'
import { evaluationsService } from '@/services/evaluations'

interface EvaluationsState {
  // State
  jobs: EvaluationJob[]
  activeJob: EvaluationJob | null
  loading: boolean
  error: string | null
  
  // Real-time tracking
  trackingTasks: Map<string, TaskProgress>
  
  // Actions
  fetchJobs: (userId: string) => Promise<void>
  fetchJobById: (jobId: number) => Promise<void>
  startEvaluation: (params: ModelUploadForm & { userId: string }) => Promise<string>
  cancelEvaluation: (taskId: string) => Promise<void>
  
  // Real-time tracking
  startTracking: (taskId: string) => void
  stopTracking: (taskId: string) => void
  updateTaskProgress: (taskId: string, progress: TaskProgress) => void
  
  // Utilities
  clearError: () => void
  reset: () => void
}

export const useEvaluationsStore = create<EvaluationsState>()(
  devtools(
    immer((set, get) => ({
      // Initial state
      jobs: [],
      activeJob: null,
      loading: false,
      error: null,
      trackingTasks: new Map(),
      
      // Actions
      fetchJobs: async (userId) => {
        set((state) => {
          state.loading = true
          state.error = null
        })
        
        try {
          const jobs = await evaluationsService.getJobs(userId)
          set((state) => {
            state.jobs = jobs
            state.loading = false
          })
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to fetch jobs'
            state.loading = false
          })
        }
      },
      
      fetchJobById: async (jobId) => {
        set((state) => {
          state.loading = true
          state.error = null
        })
        
        try {
          const job = await evaluationsService.getJobById(jobId)
          set((state) => {
            state.activeJob = job
            // Update job in list if it exists
            const index = state.jobs.findIndex(j => j.id === jobId)
            if (index !== -1) {
              state.jobs[index] = job
            } else {
              state.jobs.unshift(job)
            }
            state.loading = false
          })
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to fetch job'
            state.loading = false
          })
        }
      },
      
      startEvaluation: async (params) => {
        set((state) => {
          state.loading = true
          state.error = null
        })
        
        try {
          const response = await evaluationsService.startEvaluation(params)
          
          // Create a pending job locally for immediate feedback
          const pendingJob: EvaluationJob = {
            id: response.job_id,
            user_id: params.userId,
            model_name: params.modelName,
            model_id: 0, // Will be updated when job completes
            status: 'PENDING',
            task_id: response.task_id,
            results: null,
            artifacts: null,
            error_message: null,
            created_at: new Date().toISOString(),
            completed_at: null,
          }
          
          set((state) => {
            state.jobs.unshift(pendingJob)
            state.activeJob = pendingJob
            state.loading = false
          })
          
          // Start tracking this task
          get().startTracking(response.task_id)
          
          return response.task_id
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to start evaluation'
            state.loading = false
          })
          throw error
        }
      },
      
      cancelEvaluation: async (taskId) => {
        try {
          await evaluationsService.cancelTask(taskId)
          
          set((state) => {
            // Update job status
            const jobIndex = state.jobs.findIndex(j => j.task_id === taskId)
            if (jobIndex !== -1) {
              state.jobs[jobIndex].status = 'FAILED'
              state.jobs[jobIndex].error_message = 'Evaluation cancelled by user'
            }
            
            // Remove from tracking
            state.trackingTasks.delete(taskId)
          })
          
          get().stopTracking(taskId)
        } catch (error) {
          set((state) => {
            state.error = error instanceof Error ? error.message : 'Failed to cancel evaluation'
          })
          throw error
        }
      },
      
      // Real-time tracking
      startTracking: (taskId) => {
        const intervalId = setInterval(async () => {
          try {
            const progress = await evaluationsService.getTaskProgress(taskId)
            get().updateTaskProgress(taskId, progress)
            
            // Stop tracking if completed
            if (['SUCCESS', 'FAILURE'].includes(progress.status)) {
              get().stopTracking(taskId)
              
              // Refresh the specific job
              if (progress.result?.job_id) {
                get().fetchJobById(progress.result.job_id)
              }
            }
          } catch (error) {
            console.warn(`Failed to track task ${taskId}:`, error)
          }
        }, 2000) // Poll every 2 seconds
        
        // Store interval for cleanup
        set((state) => {
          state.trackingTasks.set(taskId, {
            task_id: taskId,
            status: 'PENDING',
            intervalId: intervalId as any,
          })
        })
      },
      
      stopTracking: (taskId) => {
        const task = get().trackingTasks.get(taskId)
        if (task?.intervalId) {
          clearInterval(task.intervalId)
        }
        
        set((state) => {
          state.trackingTasks.delete(taskId)
        })
      },
      
      updateTaskProgress: (taskId, progress) => {
        set((state) => {
          state.trackingTasks.set(taskId, progress)
          
          // Update job status if we have it
          const jobIndex = state.jobs.findIndex(j => j.task_id === taskId)
          if (jobIndex !== -1) {
            const job = state.jobs[jobIndex]
            job.status = progress.status === 'SUCCESS' ? 'COMPLETED' :
                        progress.status === 'FAILURE' ? 'FAILED' :
                        progress.status === 'PROCESSING' ? 'PROCESSING' : 'PENDING'
            
            if (progress.error) {
              job.error_message = progress.error
            }
          }
        })
      },
      
      // Utilities
      clearError: () => {
        set((state) => {
          state.error = null
        })
      },
      
      reset: () => {
        // Clear all tracking intervals
        const { trackingTasks } = get()
        trackingTasks.forEach((task) => {
          if (task.intervalId) {
            clearInterval(task.intervalId)
          }
        })
        
        set((state) => {
          state.jobs = []
          state.activeJob = null
          state.loading = false
          state.error = null
          state.trackingTasks.clear()
        })
      },
    })),
    { name: 'EvaluationsStore' }
  )
)
```

### Step 2.4: API Services Layer
#### src/services/api.ts (Axios Configuration)
```typescript
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios'
import { toast } from 'sonner'

// Environment configuration
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api'
const ASSET_BASE_URL = import.meta.env.VITE_ASSET_BASE_URL || 'http://localhost:8000'

// Create axios instance
const createApiClient = (): AxiosInstance => {
  const client = axios.create({
    baseURL: API_BASE_URL,
    timeout: 30000, // 30 seconds timeout
    headers: {
      'Content-Type': 'application/json',
    },
  })

  // Request interceptor - Add auth token
  client.interceptors.request.use(
    (config) => {
      const token = localStorage.getItem('auth_token')
      if (token) {
        config.headers.Authorization = `Bearer ${token}`
      }
      
      // Add request ID for tracking
      config.headers['X-Request-ID'] = crypto.randomUUID()
      
      return config
    },
    (error) => {
      return Promise.reject(error)
    }
  )

  // Response interceptor - Handle errors
  client.interceptors.response.use(
    (response: AxiosResponse) => {
      // Log successful requests in development
      if (import.meta.env.DEV) {
        console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url}`, {
          status: response.status,
          data: response.data,
        })
      }
      return response
    },
    (error) => {
      // Log errors in development
      if (import.meta.env.DEV) {
        console.error(`❌ ${error.config?.method?.toUpperCase()} ${error.config?.url}`, {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
        })
      }

      // Handle different error types
      if (error.response) {
        const { status, data } = error.response
        
        switch (status) {
          case 401:
            // Unauthorized - clear auth and redirect to login
            localStorage.removeItem('auth_token')
            if (typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {
              window.location.href = '/login'
            }
            toast.error('Session expired. Please log in again.')
            break
            
          case 403:
            // Forbidden
            toast.error('You don\'t have permission to perform this action.')
            break
            
          case 404:
            // Not found
            toast.error('The requested resource was not found.')
            break
            
          case 413:
            // File too large
            toast.error('File is too large. Please upload a smaller file.')
            break
            
          case 422:
            // Validation error
            if (data.detail && Array.isArray(data.detail)) {
              const validationErrors = data.detail.map((err: any) => 
                `${err.loc?.join('.')} - ${err.msg}`
              ).join(', ')
              toast.error(`Validation error: ${validationErrors}`)
            } else {
              toast.error(data.detail || 'Validation error occurred.')
            }
            break
            
          case 429:
            // Rate limited
            toast.error('Too many requests. Please wait a moment and try again.')
            break
            
          case 500:
          case 502:
          case 503:
          case 504:
            // Server errors
            toast.error('Server error occurred. Please try again later.')
            break
            
          default:
            // Generic error
            toast.error(data.detail || data.message || 'An unexpected error occurred.')
        }
        
        // Return structured error
        return Promise.reject({
          message: data.detail || data.message || 'An error occurred',
          status,
          code: data.code,
          details: data,
        })
      } else if (error.request) {
        // Network error
        toast.error('Network error. Please check your connection and try again.')
        return Promise.reject({
          message: 'Network error occurred',
          status: 0,
          code: 'NETWORK_ERROR',
        })
      } else {
        // Request setup error
        toast.error('Request failed. Please try again.')
        return Promise.reject({
          message: error.message || 'Request failed',
          status: 0,
          code: 'REQUEST_ERROR',
        })
      }
    }
  )

  return client
}

// Create and export the API client
export const apiClient = createApiClient()

// Helper functions for different request types
export const apiHelpers = {
  // Standard JSON requests
  get: <T>(url: string, config?: AxiosRequestConfig) => 
    apiClient.get<T>(url, config).then(response => response.data),
    
  post: <T>(url: string, data?: any, config?: AxiosRequestConfig) => 
    apiClient.post<T>(url, data, config).then(response => response.data),
    
  put: <T>(url: string, data?: any, config?: AxiosRequestConfig) => 
    apiClient.put<T>(url, data, config).then(response => response.data),
    
  patch: <T>(url: string, data?: any, config?: AxiosRequestConfig) => 
    apiClient.patch<T>(url, data, config).then(response => response.data),
    
  delete: <T>(url: string, config?: AxiosRequestConfig) => 
    apiClient.delete<T>(url, config).then(response => response.data),

  // File upload with progress
  uploadFile: <T>(
    url: string, 
    formData: FormData, 
    onProgress?: (progress: number) => void
  ) => {
    return apiClient.post<T>(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: (progressEvent) => {
        if (onProgress && progressEvent.total) {
          const progress = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          )
          onProgress(progress)
        }
      },
    }).then(response => response.data)
  },

  // Download file
  downloadFile: async (url: string, filename: string) => {
    const response = await apiClient.get(url, {
      responseType: 'blob',
    })
    
    // Create download link
    const downloadUrl = window.URL.createObjectURL(new Blob([response.data]))
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = filename
    document.body.appendChild(link)
    link.click()
    link.remove()
    window.URL.revokeObjectURL(downloadUrl)
  }
}

// Export asset URL helper
export const getAssetUrl = (path: string): string => {
  if (path.startsWith('http')) return path
  return `${ASSET_BASE_URL}${path.startsWith('/') ? '' : '/'}${path}`
}

export default apiClient
```

#### src/services/auth.ts
```typescript
import type { User, LoginForm, SignUpForm } from '@/types/auth'
import { apiHelpers } from './api'

interface AuthResponse {
  user: User
  token: string
  expires_in: number
}

export const authService = {
  async getTaskProgress(taskId: string): Promise<TaskProgress> {
    return apiHelpers.get<TaskProgress>(`/evaluations/task/${taskId}/status`)
  },

  async getTaskResult(taskId: string): Promise<any> {
    return apiHelpers.get(`/evaluations/task/${taskId}/result`)
  },

  async cancelTask(taskId: string): Promise<void> {
    return apiHelpers.post<void>(`/evaluations/task/${taskId}/cancel`)
  },
}
```

### Step 2.5: Core UI Components Setup
#### src/components/ui/button.tsx (ShadCN/UI)
```typescript
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/utils/helpers"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        xl: "h-12 rounded-lg px-10 text-base",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  loading?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, loading = false, children, disabled, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        disabled={disabled || loading}
        {...props}
      >
        {loading ? (
          <>
            <svg
              className="mr-2 h-4 w-4 animate-spin"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              />
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
            {typeof children === 'string' ? 'Loading...' : children}
          </>
        ) : (
          children
        )}
      </Comp>
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

#### src/components/ui/card.tsx
```typescript
import * as React from "react"
import { cn } from "@/utils/helpers"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```

#### src/components/ui/input.tsx
```typescript
import * as React from "react"
import { cn } from "@/utils/helpers"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  error?: boolean
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, error, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          error && "border-destructive focus-visible:ring-destructive",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
```

#### src/components/ui/badge.tsx
```typescript
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/utils/helpers"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
        success:
          "border-transparent bg-green-500 text-white shadow hover:bg-green-600",
        warning:
          "border-transparent bg-yellow-500 text-white shadow hover:bg-yellow-600",
        info:
          "border-transparent bg-blue-500 text-white shadow hover:bg-blue-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
```

#### src/components/ui/progress.tsx
```typescript
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/utils/helpers"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all duration-300 ease-out"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
```

---

## PHASE 3: CORE PAGES IMPLEMENTATION (Days 4-6)

### Step 3.1: Main App Structure
#### src/main.tsx
```typescript
import React from 'react'
import ReactDOM from 'react-dom/client'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { BrowserRouter } from 'react-router-dom'
import { Toaster } from 'sonner'
import App from './App'
import './styles/globals.css'

// Create a client with optimized defaults
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)
      retry: (failureCount, error: any) => {
        // Don't retry on 4xx errors
        if (error?.status >= 400 && error?.status < 500) {
          return false
        }
        // Retry up to 3 times for other errors
        return failureCount < 3
      },
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: 1,
    },
  },
})

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <QueryClientProvider client={queryClient}>
        <App />
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            className: 'font-sans',
          }}
        />
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </BrowserRouter>
  </React.StrictMode>
)
```

#### src/App.tsx
```typescript
import React, { Suspense, useEffect } from 'react'
import { Routes, Route, Navigate } from 'react-router-dom'
import { useAuthStore } from '@/stores/authStore'
import { Layout } from '@/components/layout/Layout'
import { LoadingSpinner } from '@/components/common/LoadingSpinner'
import { ProtectedRoute } from '@/components/common/ProtectedRoute'

// Lazy load pages for optimal performance
const Dashboard = React.lazy(() => import('@/pages/Dashboard'))
const Upload = React.lazy(() => import('@/pages/Upload'))
const Models = React.lazy(() => import('@/pages/Models'))
const ModelDetails = React.lazy(() => import('@/pages/ModelDetails'))
const Compare = React.lazy(() => import('@/pages/Compare'))
const Evaluations = React.lazy(() => import('@/pages/Evaluations'))
const EvaluationResults = React.lazy(() => import('@/pages/EvaluationResults'))
const Login = React.lazy(() => import('@/pages/Login'))
const SignUp = React.lazy(() => import('@/pages/SignUp'))
const NotFound = React.lazy(() => import('@/pages/NotFound'))

function App() {
  const { checkAuth, isAuthenticated } = useAuthStore()

  useEffect(() => {
    // Check authentication on app load
    checkAuth()
  }, [checkAuth])

  return (
    <div className="min-h-screen bg-background font-sans antialiased">
      <Routes>
        {/* Public routes */}
        <Route 
          path="/login" 
          element={
            <Suspense fallback={<LoadingSpinner />}>
              {isAuthenticated ? <Navigate to="/dashboard" replace /> : <Login />}
            </Suspense>
          } 
        />
        <Route 
          path="/signup" 
          element={
            <Suspense fallback={<LoadingSpinner />}>
              {isAuthenticated ? <Navigate to="/dashboard" replace /> : <SignUp />}
            </Suspense>
          } 
        />

        {/* Protected routes */}
        <Route
          path="/*"
          element={
            <ProtectedRoute>
              <Layout>
                <Suspense fallback={<LoadingSpinner />}>
                  <Routes>
                    <Route path="/" element={<Navigate to="/dashboard" replace />} />
                    <Route path="/dashboard" element={<Dashboard />} />
                    <Route path="/upload" element={<Upload />} />
                    <Route path="/models" element={<Models />} />
                    <Route path="/models/:id" element={<ModelDetails />} />
                    <Route path="/compare" element={<Compare />} />
                    <Route path="/evaluations" element={<Evaluations />} />
                    <Route path="/evaluations/:jobId" element={<EvaluationResults />} />
                    <Route path="*" element={<NotFound />} />
                  </Routes>
                </Suspense>
              </Layout>
            </ProtectedRoute>
          }
        />
      </Routes>
    </div>
  )
}

export default App
```

### Step 3.2: Layout Components
#### src/components/layout/Layout.tsx
```typescript
import React from 'react'
import { Header } from './Header'
import { Sidebar } from './Sidebar'
import { cn } from '@/utils/helpers'

interface LayoutProps {
  children: React.ReactNode
  className?: string
}

export function Layout({ children, className }: LayoutProps) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <Header />
      <div className="flex">
        <Sidebar />
        <main className={cn("flex-1 overflow-auto", className)}>
          <div className="container mx-auto px-4 py-6 max-w-7xl">
            {children}
          </div>
        </main>
      </div>
    </div>
  )
}
```

#### src/components/layout/Header.tsx
```typescript
import React from 'react'
import { Link, useLocation } from 'react-router-dom'
import { useAuthStore } from '@/stores/authStore'
import { Button } from '@/components/ui/button'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Brain, User, LogOut, Settings } from 'lucide-react'
import { cn } from '@/utils/helpers'

export function Header() {
  const { user, logout } = useAuthStore()
  const location = useLocation()

  const handleLogout = async () => {
    try {
      await logout()
    } catch (error) {
      console.error('Logout failed:', error)
    }
  }

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60">
      <div className="container flex h-16 items-center justify-between px-4">
        {/* Logo */}
        <Link 
          to="/dashboard" 
          className="flex items-center space-x-3 transition-opacity hover:opacity-80"
        >
          <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-gradient-to-br from-purple-600 to-pink-600 text-white">
            <Brain className="h-5 w-5" />
          </div>
          <div className="flex flex-col">
            <span className="text-xl font-bold text-gradient">ModelWhiz</span>
            <span className="text-xs text-muted-foreground">ML Dashboard</span>
          </div>
        </Link>

        {/* Navigation */}
        <nav className="hidden md:flex items-center space-x-6">
          {[
            { href: '/dashboard', label: 'Dashboard' },
            { href: '/models', label: 'Models' },
            { href: '/upload', label: 'Upload' },
            { href: '/compare', label: 'Compare' },
            { href: '/evaluations', label: 'Evaluations' },
          ].map((link) => (
            <Link
              key={link.href}
              to={link.href}
              className={cn(
                "text-sm font-medium transition-colors hover:text-primary",
                location.pathname === link.href
                  ? "text-primary"
                  : "text-muted-foreground"
              )}
            >
              {link.label}
            </Link>
          ))}
        </nav>

        {/* User menu */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="relative h-10 w-10 rounded-full">
              <Avatar className="h-10 w-10">
                <AvatarImage src={user?.avatar_url} alt={user?.name} />
                <AvatarFallback className="bg-gradient-to-br from-purple-600 to-pink-600 text-white">
                  {user?.name?.charAt(0)?.toUpperCase() || 'U'}
                </AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-56" align="end">
            <DropdownMenuLabel>
              <div className="flex flex-col space-y-1">
                <p className="text-sm font-medium leading-none">{user?.name}</p>
                <p className="text-xs leading-none text-muted-foreground">
                  {user?.email}
                </p>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <User className="mr-2 h-4 w-4" />
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem>
              <Settings className="mr-2 h-4 w-4" />
              Settings
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={handleLogout}>
              <LogOut className="mr-2 h-4 w-4" />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  )
}
```

### Step 3.3: Dashboard Page Implementation
#### src/pages/Dashboard.tsx
```typescript
import React from 'react'
import { motion } from 'framer-motion'
import { useQuery } from '@tanstack/react-query'
import { useAuthStore } from '@/stores/authStore'
import { useModelsStore } from '@/stores/modelsStore'
import { modelsService } from '@/services/models'
import { StatsCards } from '@/components/dashboard/StatsCards'
import { RecentModels } from '@/components/dashboard/RecentModels'
import { QuickActions } from '@/components/dashboard/QuickActions'
import { ActivityFeed } from '@/components/dashboard/ActivityFeed'
import { PerformanceChart } from '@/components/dashboard/PerformanceChart'
import { SearchBar } from '@/components/common/SearchBar'
import { Brain, TrendingUp } from 'lucide-react'

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    }
  }
}

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 10
    }
  }
}

export default function Dashboard() {
  const { user } = useAuthStore()
  const { models, fetchModels, setSearchQuery } = useModelsStore()

  // Fetch user statistics
  const { data: stats, isLoading: statsLoading } = useQuery({
    queryKey: ['model-stats', user?.id],
    queryFn: () => modelsService.getModelStats(user?.id),
    enabled: !!user?.id,
  })

  // Fetch recent models
  React.useEffect(() => {
    if (user?.id) {
      fetchModels(user.id)
    }
  }, [user?.id, fetchModels])

  return (
    <motion.div
      className="space-y-8"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* Header Section */}
      <motion.div variants={itemVariants} className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-gradient-to-br from-purple-600 to-pink-600 text-white">
              <Brain className="h-6 w-6" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gradient">
                Welcome back, {user?.name?.split(' ')[0]}!
              </h1>
              <p className="text-muted-foreground">
                Here's what's happening with your ML models today.
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <TrendingUp className="h-5 w-5 text-green-500" />
            <span className="text-sm font-medium text-green-600">
              Performance trending up
            </span>
          </div>
        </div>
        
        <SearchBar
          placeholder="Search models, evaluations, or insights..."
          onSearch={setSearchQuery}
          className="max-w-md"
        />
      </motion.div>

      {/* Stats Cards */}
      <motion.div variants={itemVariants}>
        <StatsCards stats={stats} loading={statsLoading} />
      </motion.div>

      {/* Main Content Grid */}
      <div className="grid gap-8 lg:grid-cols-12">
        {/* Left Column */}
        <div className="space-y-8 lg:col-span-8">
          <motion.div variants={itemVariants}>
            <PerformanceChart models={models} />
          </motion.div>
          
          <motion.div variants={itemVariants}>
            <RecentModels models={models.slice(0, 6)} />
          </motion.div>
        </div>

        {/* Right Column */}
        <div className="space-y-8 lg:col-span-4">
          <motion.div variants={itemVariants}>
            <QuickActions />
          </motion.div>
          
          <motion.div variants={itemVariants}>
            <ActivityFeed userId={user?.id} />
          </motion.div>
        </div>
      </div>
    </motion.div>
  )
}
```

---

## PHASE 4: ADVANCED FEATURES (Days 7-10)

### Step 4.1: Real-time Features with Socket.IO
#### src/hooks/useSocket.ts
```typescript
import { useEffect, useRef, useState } from 'react'
import { io, Socket } from 'socket.io-client'
import { useAuthStore } from '@/stores/authStore'
import { toast } from 'sonner'

interface SocketState {
  connected: boolean
  socket: Socket | null
}

export function useSocket() {
  const [state, setState] = useState<SocketState>({
    connected: false,
    socket: null,
  })
  const { user, isAuthenticated } = useAuthStore()
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>()
  const reconnectAttemptsRef = useRef(0)
  const maxReconnectAttempts = 5

  useEffect(() => {
    if (!isAuthenticated || !user?.id) {
      return
    }

    const socketUrl = import.meta.env.VITE_SOCKET_URL || 'http://localhost:8000'
    const token = localStorage.getItem('auth_token')

    const socket = io(socketUrl, {
      auth: {
        token,
        userId: user.id,
      },
      transports: ['websocket', 'polling'],
      timeout: 20000,
    })

    // Connection events
    socket.on('connect', () => {
      console.log('✅ Socket connected:', socket.id)
      setState({ connected: true, socket })
      reconnectAttemptsRef.current = 0
      
      toast.success('Connected to real-time updates', {
        duration: 2000,
      })
    })

    socket.on('disconnect', (reason) => {
      console.log('❌ Socket disconnected:', reason)
      setState({ connected: false, socket: null })
      
      if (reason === 'io server disconnect') {
        // Server initiated disconnect, don't reconnect
        return
      }
      
      // Auto-reconnect with exponential backoff
      if (reconnectAttemptsRef.current < maxReconnectAttempts) {
        const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000)
        reconnectTimeoutRef.current = setTimeout(() => {
          reconnectAttemptsRef.current++
          socket.connect()
        }, delay)
      } else {
        toast.error('Lost connection to server. Please refresh the page.', {
          duration: 0, // Persistent
        })
      }
    })

    socket.on('connect_error', (error) => {
      console.error('Socket connection error:', error)
      toast.error('Failed to connect to real-time updates')
    })

    // Authentication error
    socket.on('auth_error', (error) => {
      console.error('Socket auth error:', error)
      toast.error('Authentication failed. Please log in again.')
      useAuthStore.getState().logout()
    })

    setState({ connected: false, socket })

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current)
      }
      socket.disconnect()
    }
  }, [isAuthenticated, user?.id])

  return state
}

// Hook for evaluation progress tracking
export function useEvaluationSocket(taskId: string | null) {
  const { socket, connected } = useSocket()
  const [progress, setProgress] = useState<any>(null)

  useEffect(() => {
    if (!socket || !connected || !taskId) {
      return
    }

    // Join task room
    socket.emit('join_task', taskId)

    // Listen for progress updates
    socket.on('task_progress', (data) => {
      if (data.task_id === taskId) {
        setProgress(data)
      }
    })

    // Listen for task completion
    socket.on('task_completed', (data) => {
      if (data.task_id === taskId) {
        setProgress(data)
        toast.success('Evaluation completed!', {
          duration: 5000,
        })
      }
    })

    // Listen for task failure
    socket.on('task_failed', (data) => {
      if (data.task_id === taskId) {
        setProgress(data)
        toast.error(`Evaluation failed: ${data.error}`, {
          duration: 8000,
        })
      }
    })

    return () => {
      socket.off('task_progress')
      socket.off('task_completed')
      socket.off('task_failed')
      socket.emit('leave_task', taskId)
    }
  }, [socket, connected, taskId])

  return progress
}
```

### Step 4.2: Advanced Model Comparison
#### src/components/model/ModelComparison.tsx
```typescript
import React, { useState, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useQuery } from '@tanstack/react-query'
import { modelsService } from '@/services/models'
import type { Model } from '@/types/models'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { ComparisonChart } from '@/components/charts/ComparisonChart'
import { RadarChart } from '@/components/charts/RadarChart'
import { Trophy, TrendingUp, TrendingDown, Minus, Download } from 'lucide-react'
import { cn } from '@/utils/helpers'

interface ModelComparisonProps {
  userId: string
  initialModelA?: Model
  initialModelB?: Model
  onModelSelect?: (modelA: login(credentials: LoginForm): Promise<AuthResponse> {
    return apiHelpers.post<AuthResponse>('/auth/login', credentials)
  },

  async signUp(userData: SignUpForm): Promise<AuthResponse> {
    const { confirmPassword, ...signUpData } = userData
    return apiHelpers.post<AuthResponse>('/auth/register', signUpData)
  },

  async logout(): Promise<void> {
    return apiHelpers.post<void>('/auth/logout')
  },

  async getCurrentUser(): Promise<User> {
    return apiHelpers.get<User>('/auth/me')
  },

  async refreshToken(): Promise<{ token: string; expires_in: number }> {
    return apiHelpers.post<{ token: string; expires_in: number }>('/auth/refresh')
  },

  async requestPasswordReset(email: string): Promise<void> {
    return apiHelpers.post<void>('/auth/request-password-reset', { email })
  },

  async resetPassword(token: string, password: string): Promise<void> {
    return apiHelpers.post<void>('/auth/reset-password', { token, password })
  },

  async updateProfile(updates: Partial<User>): Promise<User> {
    return apiHelpers.patch<User>('/auth/profile', updates)
  },

  async changePassword(currentPassword: string, newPassword: string): Promise<void> {
    return apiHelpers.post<void>('/auth/change-password', {
      current_password: currentPassword,
      new_password: newPassword,
    })
  },

  async deleteAccount(password: string): Promise<void> {
    return apiHelpers.delete<void>('/auth/account', {
      data: { password }
    })
  },
}
```

#### src/services/models.ts
```typescript
import type { Model, PaginatedResponse } from '@/types/models'
import { apiHelpers } from './api'

interface GetModelsParams {
  userId?: string
  search?: string
  taskType?: 'classification' | 'regression'
  sortBy?: 'upload_time' | 'name' | 'version'
  sortOrder?: 'asc' | 'desc'
  cursor?: string
  limit?: number
}

interface ModelInsights {
  insights: string[]
  model_id: number
}

export const modelsService = {
  async getModels(params: GetModelsParams): Promise<PaginatedResponse<Model>> {
    const queryParams = new URLSearchParams()
    
    if (params.userId) queryParams.append('user_id', params.userId)
    if (params.search) queryParams.append('search', params.search)
    if (params.taskType) queryParams.append('task_type', params.taskType)
    if (params.sortBy) queryParams.append('sort_by', params.sortBy)
    if (params.sortOrder) queryParams.append('sort_order', params.sortOrder)
    if (params.cursor) queryParams.append('cursor', params.cursor)
    if (params.limit) queryParams.append('limit', params.limit.toString())
    
    const url = `/models/?${queryParams.toString()}`
    return apiHelpers.get<PaginatedResponse<Model>>(url)
  },

  async getModelById(id: number): Promise<Model> {
    return apiHelpers.get<Model>(`/models/${id}`)
  },

  async createModel(model: Omit<Model, 'id' | 'upload_time'>): Promise<Model> {
    return apiHelpers.post<Model>('/models/', model)
  },

  async updateModel(id: number, updates: Partial<Model>): Promise<Model> {
    return apiHelpers.put<Model>(`/models/${id}`, updates)
  },

  async deleteModel(id: number, userId: string): Promise<void> {
    return apiHelpers.delete<void>(`/models/${id}?user_id=${userId}`)
  },

  async getModelInsights(id: number, forceRefresh = false): Promise<ModelInsights> {
    const url = `/models/${id}/insights${forceRefresh ? '?force_refresh=true' : ''}`
    return apiHelpers.get<ModelInsights>(url)
  },

  async getModelStats(userId?: string): Promise<{
    total_models: number
    classification_models: number
    regression_models: number
    average_accuracy: number
    average_r2_score: number
    best_model: Model | null
  }> {
    const url = `/models/stats${userId ? `?user_id=${userId}` : ''}`
    return apiHelpers.get(url)
  },
}
```

#### src/services/evaluations.ts
```typescript
import type { EvaluationJob, ModelUploadForm } from '@/types/models'
import type { TaskProgress } from '@/types/api'
import { apiHelpers } from './api'

interface StartEvaluationResponse {
  job_id: number
  task_id: string
  status: string
  message: string
}

export const evaluationsService = {
  async startEvaluation(params: ModelUploadForm & { userId: string }): Promise<StartEvaluationResponse> {
    const formData = new FormData()
    
    formData.append('model_file', params.modelFile)
    formData.append('dataset', params.datasetFile)
    formData.append('model_name', params.modelName)
    formData.append('target_column', params.targetColumn)
    formData.append('user_id', params.userId)
    formData.append('split_data', String(params.splitData))
    
    if (params.preprocessorFile) {
      formData.append('preprocessor_file', params.preprocessorFile)
    }
    
    return apiHelpers.uploadFile<StartEvaluationResponse>('/evaluations/start', formData)
  },

  async getJobs(userId: string, statusFilter?: string): Promise<EvaluationJob[]> {
    const params = new URLSearchParams({ user_id: userId })
    if (statusFilter) params.append('status_filter', statusFilter)
    
    const response = await apiHelpers.get<{ jobs: EvaluationJob[] }>(`/evaluations/?${params}`)
    return response.jobs
  },

  async getJobById(jobId: number): Promise<EvaluationJob> {
    return apiHelpers.get<EvaluationJob>(`/evaluations/${jobId}/results`)
  },

  async getJobStatus(jobId: number): Promise<{ job_id: number; status: string }> {
    return apiHelpers.get<{ job_id: number; status: string }>(`/evaluations/${jobId}/status`)
  },

  async



# ModelWhiz Complete Implementation
## Continuing from Step 4.3 - Auth Service and Beyond

### Complete Auth Service Implementation
#### src/services/auth.ts (Complete)
```typescript
import type { User, LoginForm, SignUpForm } from '@/types/auth'
import { apiHelpers } from './api'

interface AuthResponse {
  user: User
  token: string
  expires_in: number
}

export const authService = {
  async login(credentials: LoginForm): Promise<AuthResponse> {
    return apiHelpers.post<AuthResponse>('/auth/login', credentials)
  },

  async signUp(userData: SignUpForm): Promise<AuthResponse> {
    const { confirmPassword, ...signUpData } = userData
    return apiHelpers.post<AuthResponse>('/auth/register', signUpData)
  },

  async logout(): Promise<void> {
    return apiHelpers.post<void>('/auth/logout')
  },

  async getCurrentUser(): Promise<User> {
    return apiHelpers.get<User>('/auth/me')
  },

  async refreshToken(): Promise<{ token: string; expires_in: number }> {
    return apiHelpers.post<{ token: string; expires_in: number }>('/auth/refresh')
  },

  async requestPasswordReset(email: string): Promise<void> {
    return apiHelpers.post<void>('/auth/request-password-reset', { email })
  },

  async resetPassword(token: string, password: string): Promise<void> {
    return apiHelpers.post<void>('/auth/reset-password', { token, password })
  },

  async updateProfile(updates: Partial<User>): Promise<User> {
    return apiHelpers.patch<User>('/auth/profile', updates)
  },

  async changePassword(currentPassword: string, newPassword: string): Promise<void> {
    return apiHelpers.post<void>('/auth/change-password', {
      current_password: currentPassword,
      new_password: newPassword,
    })
  },

  async deleteAccount(password: string): Promise<void> {
    return apiHelpers.delete<void>('/auth/account', {
      data: { password }
    })
  },
}
```

### Complete Evaluations Service
#### src/services/evaluations.ts (Complete)
```typescript
import type { EvaluationJob, ModelUploadForm } from '@/types/models'
import type { TaskProgress } from '@/types/api'
import { apiHelpers } from './api'

interface StartEvaluationResponse {
  job_id: number
  task_id: string
  status: string
  message: string
}

export const evaluationsService = {
  async startEvaluation(params: ModelUploadForm & { userId: string }): Promise<StartEvaluationResponse> {
    const formData = new FormData()
    
    formData.append('model_file', params.modelFile)
    formData.append('dataset', params.datasetFile)
    formData.append('model_name', params.modelName)
    formData.append('target_column', params.targetColumn)
    formData.append('user_id', params.userId)
    formData.append('split_data', String(params.splitData))
    
    if (params.preprocessorFile) {
      formData.append('preprocessor_file', params.preprocessorFile)
    }
    
    return apiHelpers.uploadFile<StartEvaluationResponse>('/evaluations/start', formData)
  },

  async getJobs(userId: string, statusFilter?: string): Promise<EvaluationJob[]> {
    const params = new URLSearchParams({ user_id: userId })
    if (statusFilter) params.append('status_filter', statusFilter)
    
    const response = await apiHelpers.get<{ jobs: EvaluationJob[] }>(`/evaluations/?${params}`)
    return response.jobs
  },

  async getJobById(jobId: number): Promise<EvaluationJob> {
    return apiHelpers.get<EvaluationJob>(`/evaluations/${jobId}/results`)
  },

  async getJobStatus(jobId: number): Promise<{ job_id: number; status: string }> {
    return apiHelpers.get<{ job_id: number; status: string }>(`/evaluations/${jobId}/status`)
  },

  async getTaskProgress(taskId: string): Promise<TaskProgress> {
    return apiHelpers.get<TaskProgress>(`/evaluations/task/${taskId}/status`)
  },

  async getTaskResult(taskId: string): Promise<any> {
    return apiHelpers.get(`/evaluations/task/${taskId}/result`)
  },

  async cancelTask(taskId: string): Promise<void> {
    return apiHelpers.post<void>(`/evaluations/task/${taskId}/cancel`)
  },
}
```

## PHASE 5: CORE COMPONENTS IMPLEMENTATION

### Step 5.1: Common Components
#### src/components/common/LoadingSpinner.tsx
```typescript
import React from 'react'
import { cn } from '@/utils/helpers'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl'
  className?: string
  message?: string
}

export function LoadingSpinner({ 
  size = 'md', 
  className,
  message = 'Loading...' 
}: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
    xl: 'w-16 h-16'
  }

  return (
    <div className={cn("flex flex-col items-center justify-center p-8", className)}>
      <div 
        className={cn(
          "animate-spin rounded-full border-2 border-primary/20 border-t-primary",
          sizeClasses[size]
        )}
      />
      {message && (
        <p className="mt-4 text-sm text-muted-foreground">{message}</p>
      )}
    </div>
  )
}
```

#### src/components/common/ProtectedRoute.tsx
```typescript
import React, { useEffect } from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { useAuthStore } from '@/stores/authStore'
import { LoadingSpinner } from './LoadingSpinner'

interface ProtectedRouteProps {
  children: React.ReactNode
}

export function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { isAuthenticated, isLoading, checkAuth } = useAuthStore()
  const location = useLocation()

  useEffect(() => {
    if (!isAuthenticated && !isLoading) {
      checkAuth()
    }
  }, [isAuthenticated, isLoading, checkAuth])

  if (isLoading) {
    return <LoadingSpinner message="Checking authentication..." />
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />
  }

  return <>{children}</>
}
```

#### src/components/common/SearchBar.tsx
```typescript
import React, { useState, useEffect } from 'react'
import { Search, X } from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { cn } from '@/utils/helpers'
import { performanceUtils } from '@/utils/performance'

interface SearchBarProps {
  onSearch: (query: string) => void
  placeholder?: string
  className?: string
  debounceMs?: number
}

export function SearchBar({ 
  onSearch, 
  placeholder = "Search...", 
  className,
  debounceMs = 300 
}: SearchBarProps) {
  const [query, setQuery] = useState('')

  // Debounced search
  useEffect(() => {
    const debouncedSearch = performanceUtils.debounce(() => {
      onSearch(query)
    }, debounceMs)

    debouncedSearch()
  }, [query, onSearch, debounceMs])

  const clearSearch = () => {
    setQuery('')
    onSearch('')
  }

  return (
    <div className={cn("relative", className)}>
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
      <Input
        type="text"
        placeholder={placeholder}
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="pl-10 pr-10"
      />
      {query && (
        <Button
          variant="ghost"
          size="sm"
          onClick={clearSearch}
          className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0"
        >
          <X className="w-4 h-4" />
        </Button>
      )}
    </div>
  )
}
```

### Step 5.2: Form Components
#### src/components/forms/FileUploadZone.tsx
```typescript
import React, { useCallback, useState } from 'react'
import { useDropzone } from 'react-dropzone'
import { Upload, File, CheckCircle, AlertCircle } from 'lucide-react'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { cn } from '@/utils/helpers'

interface FileUploadZoneProps {
  onFileSelect: (files: FileList | null) => void
  accept?: string
  maxSize?: number // in MB
  label: string
  description?: string
  required?: boolean
  error?: string
  disabled?: boolean
  uploadProgress?: number
}

export function FileUploadZone({
  onFileSelect,
  accept,
  maxSize = 10,
  label,
  description,
  required = false,
  error,
  disabled = false,
  uploadProgress
}: FileUploadZoneProps) {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)

  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0]
      setUploadedFile(file)
      
      // Create FileList-like object
      const dt = new DataTransfer()
      dt.items.add(file)
      onFileSelect(dt.files)
    }

    if (rejectedFiles.length > 0) {
      console.warn('Rejected files:', rejectedFiles)
    }
  }, [onFileSelect])

  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({
    onDrop,
    accept: accept ? { [accept]: [] } : undefined,
    maxSize: maxSize * 1024 * 1024, // Convert MB to bytes
    multiple: false,
    disabled
  })

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <div className="space-y-2">
      <div className="flex items-center space-x-2">
        <span className="text-sm font-medium">{label}</span>
        {required && <Badge variant="destructive" className="text-xs">Required</Badge>}
      </div>
      
      {description && (
        <p className="text-xs text-muted-foreground">{description}</p>
      )}

      <Card 
        {...getRootProps()}
        className={cn(
          "border-2 border-dashed transition-colors cursor-pointer",
          isDragActive && "border-primary bg-primary/5",
          isDragReject && "border-destructive bg-destructive/5",
          error && "border-destructive",
          uploadedFile && "border-green-500 bg-green-50/50",
          disabled && "opacity-50 cursor-not-allowed"
        )}
      >
        <CardContent className="flex flex-col items-center justify-center p-6 text-center">
          <input {...getInputProps()} />
          
          {uploadProgress !== undefined ? (
            <div className="w-full space-y-2">
              <Upload className="w-8 h-8 text-primary mx-auto animate-pulse" />
              <p className="text-sm font-medium">Uploading...</p>
              <Progress value={uploadProgress} className="w-full" />
              <p className="text-xs text-muted-foreground">{uploadProgress}% complete</p>
            </div>
          ) : uploadedFile ? (
            <div className="space-y-2">
              <CheckCircle className="w-8 h-8 text-green-500 mx-auto" />
              <div className="space-y-1">
                <p className="text-sm font-medium text-green-700">{uploadedFile.name}</p>
                <p className="text-xs text-muted-foreground">
                  {formatFileSize(uploadedFile.size)}
                </p>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              <div className={cn(
                "w-10 h-10 rounded-full flex items-center justify-center mx-auto",
                error ? "bg-destructive/10" : "bg-primary/10"
              )}>
                {error ? (
                  <AlertCircle className="w-5 h-5 text-destructive" />
                ) : (
                  <Upload className="w-5 h-5 text-primary" />
                )}
              </div>
              
              <div className="space-y-1">
                <p className="text-sm font-medium">
                  {isDragActive ? 'Drop file here' : 'Click to upload or drag & drop'}
                </p>
                <p className="text-xs text-muted-foreground">
                  {accept && `Accepted formats: ${accept}`}
                  {maxSize && ` • Max size: ${maxSize}MB`}
                </p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {error && (
        <p className="text-sm text-destructive flex items-center space-x-1">
          <AlertCircle className="w-4 h-4" />
          <span>{error}</span>
        </p>
      )}
    </div>
  )
}
```

#### src/components/forms/StepIndicator.tsx
```typescript
import React from 'react'
import { CheckCircle, Circle } from 'lucide-react'
import { cn } from '@/utils/helpers'

interface Step {
  id: number
  title: string
  description: string
  icon: React.ComponentType<any>
}

interface StepIndicatorProps {
  steps: Step[]
  currentStep: number
  className?: string
}

export function StepIndicator({ steps, currentStep, className }: StepIndicatorProps) {
  return (
    <div className={cn("w-full", className)}>
      <div className="flex items-center justify-between">
        {steps.map((step, index) => {
          const isCompleted = currentStep > step.id
          const isCurrent = currentStep === step.id
          const isUpcoming = currentStep < step.id

          return (
            <React.Fragment key={step.id}>
              <div className="flex flex-col items-center space-y-2">
                <div
                  className={cn(
                    "w-12 h-12 rounded-full border-2 flex items-center justify-center transition-all duration-200",
                    isCompleted && "bg-green-500 border-green-500 text-white",
                    isCurrent && "bg-primary border-primary text-white",
                    isUpcoming && "bg-white border-gray-300 text-gray-400"
                  )}
                >
                  {isCompleted ? (
                    <CheckCircle className="w-6 h-6" />
                  ) : (
                    <step.icon className="w-6 h-6" />
                  )}
                </div>
                
                <div className="text-center max-w-24">
                  <p
                    className={cn(
                      "text-sm font-medium",
                      isCompleted && "text-green-600",
                      isCurrent && "text-primary",
                      isUpcoming && "text-gray-400"
                    )}
                  >
                    {step.title}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    {step.description}
                  </p>
                </div>
              </div>

              {index < steps.length - 1 && (
                <div
                  className={cn(
                    "flex-1 h-0.5 mx-4 transition-colors duration-200",
                    currentStep > step.id ? "bg-green-500" : "bg-gray-200"
                  )}
                />
              )}
            </React.Fragment>
          )
        })}
      </div>
    </div>
  )
}
```

### Step 5.3: Chart Components (Optimized)
#### src/components/charts/ComparisonChart.tsx
```typescript
import React, { Suspense, useMemo } from 'react'
import { Skeleton } from '@/components/ui/skeleton'
import type { Model } from '@/types/models'

// Lazy load Recharts components
const BarChart = React.lazy(() => 
  import('recharts').then(module => ({ default: module.BarChart }))
)
const Bar = React.lazy(() => 
  import('recharts').then(module => ({ default: module.Bar }))
)
const XAxis = React.lazy(() => 
  import('recharts').then(module => ({ default: module.XAxis }))
)
const YAxis = React.lazy(() => 
  import('recharts').then(module => ({ default: module.YAxis }))
)
const Tooltip = React.lazy(() => 
  import('recharts').then(module => ({ default: module.Tooltip }))
)
const ResponsiveContainer = React.lazy(() => 
  import('recharts').then(module => ({ default: module.ResponsiveContainer }))
)
const Legend = React.lazy(() => 
  import('recharts').then(module => ({ default: module.Legend }))
)

interface ComparisonChartProps {
  modelA: Model
  modelB: Model
  metrics: Array<{
    metric: string
    valueA: number
    valueB: number
    winner: 'A' | 'B' | 'tie'
  }>
}

export function ComparisonChart({ modelA, modelB, metrics }: ComparisonChartProps) {
  const chartData = useMemo(() => {
    return metrics.map(({ metric, valueA, valueB }) => ({
      metric: metric.replace(/_/g, ' ').toUpperCase(),
      [modelA.name]: valueA,
      [modelB.name]: valueB,
    }))
  }, [metrics, modelA.name, modelB.name])

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-3 border rounded-lg shadow-lg">
          <p className="font-medium text-sm">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} className="text-sm" style={{ color: entry.color }}>
              {entry.dataKey}: {typeof entry.value === 'number' ? entry.value.toFixed(4) : entry.value}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  return (
    <div className="w-full h-80">
      <Suspense fallback={<Skeleton className="w-full h-full" />}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <XAxis 
              dataKey="metric" 
              tick={{ fontSize: 12 }}
              interval={0}
              angle={-45}
              textAnchor="end"
              height={100}
            />
            <YAxis tick={{ fontSize: 12 }} />
            <Tooltip content={<CustomTooltip />} />
            <Legend />
            <Bar 
              dataKey={modelA.name} 
              fill="#3B82F6" 
              radius={[2, 2, 0, 0]}
              name={`${modelA.name} (A)`}
            />
            <Bar 
              dataKey={modelB.name} 
              fill="#10B981" 
              radius={[2, 2, 0, 0]}
              name={`${modelB.name} (B)`}
            />
          </BarChart>
        </ResponsiveContainer>
      </Suspense>
    </div>
  )
}
```

#### src/components/charts/RadarChart.tsx
```typescript
import React, { Suspense, useMemo } from 'react'
import { Skeleton } from '@/components/ui/skeleton'
import type { Model } from '@/types/models'

// Lazy load Recharts radar components
const RadarChart = React.lazy(() => 
  import('recharts').then(module => ({ default: module.RadarChart }))
)
const PolarGrid = React.lazy(() => 
  import('recharts').then(module => ({ default: module.PolarGrid }))
)
const PolarAngleAxis = React.lazy(() => 
  import('recharts').then(module => ({ default: module.PolarAngleAxis }))
)
const PolarRadiusAxis = React.lazy(() => 
  import('recharts').then(module => ({ default: module.PolarRadiusAxis }))
)
const Radar = React.lazy(() => 
  import('recharts').then(module => ({ default: module.Radar }))
)
const ResponsiveContainer = React.lazy(() => 
  import('recharts').then(module => ({ default: module.ResponsiveContainer }))
)
const Legend = React.lazy(() => 
  import('recharts').then(module => ({ default: module.Legend }))
)

interface RadarChartProps {
  modelA: Model
  modelB: Model
  metrics: Array<{
    metric: string
    valueA: number
    valueB: number
  }>
}

export function ModelRadarChart({ modelA, modelB, metrics }: RadarChartProps) {
  const radarData = useMemo(() => {
    return metrics.map(({ metric, valueA, valueB }) => ({
      metric: metric.replace(/_/g, ' ').toUpperCase(),
      [modelA.name]: valueA,
      [modelB.name]: valueB,
    }))
  }, [metrics, modelA.name, modelB.name])

  return (
    <div className="w-full h-80">
      <Suspense fallback={<Skeleton className="w-full h-full" />}>
        <ResponsiveContainer width="100%" height="100%">
          <RadarChart data={radarData} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>
            <PolarGrid />
            <PolarAngleAxis dataKey="metric" tick={{ fontSize: 12 }} />
            <PolarRadiusAxis domain={[0, 1]} tick={{ fontSize: 10 }} />
            <Radar
              name={`${modelA.name} (A)`}
              dataKey={modelA.name}
              stroke="#3B82F6"
              fill="#3B82F6"
              fillOpacity={0.3}
              strokeWidth={2}
            />
            <Radar
              name={`${modelB.name} (B)`}
              dataKey={modelB.name}
              stroke="#10B981"
              fill="#10B981"
              fillOpacity={0.3}
              strokeWidth={2}
            />
            <Legend />
          </RadarChart>
        </ResponsiveContainer>
      </Suspense>
    </div>
  )
}
```

### Step 5.4: Model Components
#### src/components/model/ModelCard.tsx
```typescript
import React from 'react'
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { 
  Brain, 
  Calendar, 
  TrendingUp, 
  Eye, 
  Trash2, 
  MoreHorizontal 
} from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import type { Model } from '@/types/models'
import { cn } from '@/utils/helpers'

interface ModelCardProps {
  model: Model
  onDelete?: (model: Model) => void
  onSelect?: (model: Model) => void
  className?: string
}

export function ModelCard({ model, onDelete, onSelect, className }: ModelCardProps) {
  const navigate = useNavigate()

  const isRegression = model.task_type === 'regression'
  const primaryMetric = isRegression 
    ? model.latest_metrics?.r2_score || 0
    : model.latest_metrics?.accuracy || 0

  const getPerformanceColor = (score: number) => {
    if (score >= 0.9) return 'text-green-600'
    if (score >= 0.8) return 'text-blue-600'
    if (score >= 0.7) return 'text-yellow-600'
    return 'text-red-600'
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffTime = Math.abs(now.getTime() - date.getTime())
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays === 1) return 'Yesterday'
    if (diffDays < 7) return `${diffDays} days ago`
    if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`
    return date.toLocaleDateString()
  }

  return (
    <motion.div
      whileHover={{ y: -4, scale: 1.02 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
      className={className}
    >
      <Card className="h-full hover:shadow-lg transition-all duration-200 border-2 hover:border-primary/20">
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg text-white">
                <Brain className="w-5 h-5" />
              </div>
              <div>
                <CardTitle className="text-lg font-semibold">{model.name}</CardTitle>
                <div className="flex items-center space-x-2 mt-1">
                  <Badge variant="outline">{model.version}</Badge>
                  <Badge 
                    variant={isRegression ? "secondary" : "default"}
                    className="text-xs"
                  >
                    {isRegression ? 'Regression' : 'Classification'}
                  </Badge>
                </div>
              </div>
            </div>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => navigate(`/models/${model.id}`)}>
                  <Eye className="mr-2 h-4 w-4" />
                  View Details
                </DropdownMenuItem>
                {onSelect && (
                  <DropdownMenuItem onClick={() => onSelect(model)}>
                    <TrendingUp className="mr-2 h-4 w-4" />
                    Compare
                  </DropdownMenuItem>
                )}
                {onDelete && (
                  <DropdownMenuItem 
                    onClick={() => onDelete(model)}
                    className="text-destructive"
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {/* Performance Score */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Performance Score</span>
              <span className={cn("text-lg font-bold", getPerformanceColor(primaryMetric))}>
                {(primaryMetric * 100).toFixed(1)}%
              </span>
            </div>
            <Progress value={primaryMetric * 100} className="h-2" />
          </div>

          {/* Key Metrics */}
          <div className="grid grid-cols-2 gap-4">
            {isRegression ? (
              <>
                <div className="text-center p-2 bg-red-50 rounded">
                  <div className="text-xs text-red-600 font-medium">RMSE</div>
                  <div className="text-sm font-bold text-red-700">
                    {model.latest_metrics?.rmse?.toFixed(4) || 'N/A'}
                  </div>
                </div>
                <div className="text-center p-2 bg-green-50 rounded">
                  <div className="text-xs text-green-600 font-medium">R² Score</div>
                  <div className="text-sm font-bold text-green-700">
                    {model.latest_metrics?.r2_score?.toFixed(4) || 'N/A'}
                  </div>
                </div>
              </>
            ) : (
              <>
                <div className="text-center p-2 bg-blue-50 rounded">
                  <div className="text-xs text-blue-600 font-medium">Accuracy</div>
                  <div className="text-sm font-bold text-blue-700">
                    {model.latest_metrics?.accuracy?.toFixed(3) || 'N/A'}
                  </div>
                </div>
                <div className="text-center p-2 bg-purple-50 rounded">
                  <div className="text-xs text-purple-600 font-medium">F1 Score</div>
                  <div className="text-sm font-bold text-purple-700">
                    {model.latest_metrics?.f1_score?.toFixed(3) || 'N/A'}
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Upload Time */}
          <div className="flex items-center space-x-2 text-sm text-muted-foreground pt-2 border-t">
            <Calendar className="w-4 h-4" />
            <span>Uploaded {formatDate(model.upload_time)}</span>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}
```

#### src/components/model/ModelList.tsx
```typescript
import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useInfiniteScroll } from '@/hooks/useInfiniteScroll'
import { useAuthStore } from '@/stores/authStore'
import { modelsService } from '@/services/models'
import { ModelCard } from './ModelCard'
import { LoadingSpinner } from '@/components/common/LoadingSpinner'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import { Search, Grid, List, Filter, SortAsc, SortDesc, Trash2 } from 'lucide-react'
import type { Model } from '@/types/models'
import { cn } from '@/utils/helpers'
import { toast } from 'sonner'

interface ModelListProps {
  onModelSelect?: (model: Model) => void
  selectionMode?: boolean
  selectedModels?: Model[]
  className?: string
}

export function ModelList({ 
  onModelSelect, 
  selectionMode = false, 
  selectedModels = [],
  className 
}: ModelListProps) {
  const { user } = useAuthStore()
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [searchQuery, setSearchQuery] = useState('')
  const [taskTypeFilter, setTaskTypeFilter] = useState<'all' | 'classification' | 'regression'>('all')
  const [sortBy, setSortBy] = useState<'upload_time' | 'name' | 'version'>('upload_time')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
  const [modelToDelete, setModelToDelete] = useState<Model | null>(null)

  const {
    items: models,
    loadMoreRef,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError
  } = useInfiniteScroll({
    queryKey: ['models', user?.id, searchQuery, taskTypeFilter, sortBy, sortOrder],
    queryFn: ({ pageParam }) => modelsService.getModels({
      userId: user?.id,
      search: searchQuery || undefined,
      taskType: taskTypeFilter !== 'all' ? taskTypeFilter : undefined,
      sortBy,
      sortOrder,
      cursor: pageParam,
      limit: 12
    }),
    enabled: !!user?.id
  })

  const handleDeleteModel = async (model: Model) => {
    if (!user?.id) return

    try {
      await modelsService.deleteModel(model.id, user.id)
      toast.success(`${model.name} deleted successfully`)
      setModelToDelete(null)
    } catch (error) {
      toast.error('Failed to delete model')
      console.error('Delete error:', error)
    }
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { type: "spring", stiffness: 100, damping: 10 }
    }
  }

  if (isLoading) {
    return <LoadingSpinner message="Loading models..." />
  }

  if (isError) {
    return (
      <div className="text-center py-12">
        <p className="text-destructive">Failed to load models</p>
        <Button onClick={() => window.location.reload()} className="mt-4">
          Try Again
        </Button>
      </div>
    )
  }

  return (
    <div className={cn("space-y-6", className)}>
      {/* Controls */}
      <div className="flex flex-col lg:flex-row gap-4 lg:items-center lg:justify-between">
        <div className="flex flex-1 items-center space-x-4">
          {/* Search */}
          <div className="relative flex-1 max-w-sm">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
            <Input
              placeholder="Search models..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Task Type Filter */}
          <Select value={taskTypeFilter} onValueChange={(value: any) => setTaskTypeFilter(value)}>
            <SelectTrigger className="w-48">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="classification">Classification</SelectItem>
              <SelectItem value="regression">Regression</SelectItem>
            </SelectContent>
          </Select>

          {/* Sort */}
          <Select value={`${sortBy}-${sortOrder}`} onValueChange={(value) => {
            const [field, order] = value.split('-')
            setSortBy(field as any)
            setSortOrder(order as any)
          }}>
            <SelectTrigger className="w-48">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="upload_time-desc">Newest First</SelectItem>
              <SelectItem value="upload_time-asc">Oldest First</SelectItem>
              <SelectItem value="name-asc">Name A-Z</SelectItem>
              <SelectItem value="name-desc">Name Z-A</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* View Mode Toggle */}
        <div className="flex items-center space-x-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('grid')}
          >
            <Grid className="w-4 h-4" />
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('list')}
          >
            <List className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Results Summary */}
      <div className="flex items-center justify-between">
        <p className="text-sm text-muted-foreground">
          {models.length} models found
        </p>
        {taskTypeFilter !== 'all' && (
          <Badge variant="secondary">
            Filtered by: {taskTypeFilter}
          </Badge>
        )}
      </div>

      {/* Models Grid/List */}
      {models.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-muted flex items-center justify-center">
            <Filter className="w-8 h-8 text-muted-foreground" />
          </div>
          <h3 className="text-lg font-semibold mb-2">No models found</h3>
          <p className="text-muted-foreground mb-4">
            {searchQuery || taskTypeFilter !== 'all'
              ? 'Try adjusting your search or filters'
              : 'Upload your first model to get started'
            }
          </p>
          {!searchQuery && taskTypeFilter === 'all' && (
            <Button onClick={() => window.location.href = '/upload'}>
              Upload Model
            </Button>
          )}
        </div>
      ) : (
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className={cn(
            viewMode === 'grid' 
              ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
              : "space-y-4"
          )}
        >
          <AnimatePresence>
            {models.map((model, index) => (
              <motion.div
                key={model.id}
                variants={itemVariants}
                layout
                onClick={() => selectionMode && onModelSelect?.(model)}
                className={cn(
                  selectionMode && "cursor-pointer",
                  selectedModels.find(m => m.id === model.id) && "ring-2 ring-primary"
                )}
              >
                <ModelCard
                  model={model}
                  onDelete={!selectionMode ? setModelToDelete : undefined}
                  onSelect={!selectionMode ? onModelSelect : undefined}
                  className={viewMode === 'list' ? "max-w-none" : undefined}
                />
              </motion.div>
            ))}
          </AnimatePresence>

          {/* Load More Trigger */}
          {hasNextPage && (
            <div ref={loadMoreRef} className="col-span-full flex justify-center py-8">
              {isFetchingNextPage && <LoadingSpinner size="sm" message="Loading more models..." />}
            </div>
          )}
        </motion.div>
      )}

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={!!modelToDelete} onOpenChange={() => setModelToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Model</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{modelToDelete?.name}"? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => modelToDelete && handleDeleteModel(modelToDelete)}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}
```

### Step 5.5: Dashboard Components
#### src/components/dashboard/StatsCards.tsx
```typescript
import React from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Skeleton } from '@/components/ui/skeleton'
import { TrendingUp, TrendingDown, Brain, Target, Award, Activity } from 'lucide-react'
import { cn } from '@/utils/helpers'

interface StatsCardsProps {
  stats?: {
    total_models: number
    classification_models: number
    regression_models: number
    average_accuracy: number
    average_r2_score: number
    best_model: any | null
  }
  loading?: boolean
}

export function StatsCards({ stats, loading }: StatsCardsProps) {
  const cards = [
    {
      title: 'Total Models',
      value: stats?.total_models || 0,
      icon: Brain,
      color: 'text-blue-600',
      bg: 'bg-blue-100',
      trend: '+12%',
      trendUp: true
    },
    {
      title: 'Classification Models',
      value: stats?.classification_models || 0,
      icon: Target,
      color: 'text-green-600',
      bg: 'bg-green-100',
      trend: '+8%',
      trendUp: true
    },
    {
      title: 'Regression Models',
      value: stats?.regression_models || 0,
      icon: Activity,
      color: 'text-purple-600',
      bg: 'bg-purple-100',
      trend: '+15%',
      trendUp: true
    },
    {
      title: 'Avg Performance',
      value: `${((stats?.average_accuracy || stats?.average_r2_score || 0) * 100).toFixed(1)}%`,
      icon: Award,
      color: 'text-yellow-600',
      bg: 'bg-yellow-100',
      trend: '-2%',
      trendUp: false
    }
  ]

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <Skeleton className="w-12 h-12 rounded-lg" />
                <div className="space-y-2">
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-6 w-16" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      {cards.map((card, index) => (
        <motion.div
          key={card.title}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
        >
          <Card className="hover:shadow-lg transition-shadow duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="space-y-2">
                  <p className="text-sm font-medium text-muted-foreground">
                    {card.title}
                  </p>
                  <div className="flex items-center space-x-2">
                    <p className="text-2xl font-bold">
                      {typeof card.value === 'number' && card.value > 999 
                        ? `${(card.value / 1000).toFixed(1)}k` 
                        : card.value
                      }
                    </p>
                    <div className={cn(
                      "flex items-center space-x-1 text-xs px-2 py-1 rounded",
                      card.trendUp ? "text-green-600 bg-green-100" : "text-red-600 bg-red-100"
                    )}>
                      {card.trendUp ? (
                        <TrendingUp className="w-3 h-3" />
                      ) : (
                        <TrendingDown className="w-3 h-3" />
                      )}
                      <span>{card.trend}</span>
                    </div>
                  </div>
                </div>
                <div className={cn("p-3 rounded-lg", card.bg)}>
                  <card.icon className={cn("w-6 h-6", card.color)} />
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      ))}
    </div>
  )
}
```

#### src/components/dashboard/QuickActions.tsx
```typescript
import React from 'react'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  Upload, 
  BarChart3, 
  History, 
  Settings, 
  Zap, 
  ArrowRight 
} from 'lucide-react'

export function QuickActions() {
  const navigate = useNavigate()

  const actions = [
    {
      title: 'Upload New Model',
      description: 'Upload and evaluate your ML model',
      icon: Upload,
      color: 'bg-blue-500',
      href: '/upload',
      featured: true
    },
    {
      title: 'Compare Models',
      description: 'Side-by-side model comparison',
      icon: BarChart3,
      color: 'bg-green-500',
      href: '/compare'
    },
    {
      title: 'View History',
      description: 'Check evaluation history',
      icon: History,
      color: 'bg-purple-500',
      href: '/evaluations'
    },
    {
      title: 'Model Settings',
      description: 'Manage model configurations',
      icon: Settings,
      color: 'bg-gray-500',
      href: '/models'
    }
  ]

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Zap className="w-5 h-5 text-yellow-500" />
          <span>Quick Actions</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {actions.map((action, index) => (
          <motion.div
            key={action.title}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Button
              variant={action.featured ? 'default' : 'ghost'}
              className={`w-full justify-start h-auto p-4 ${
                action.featured ? 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700' : ''
              }`}
              onClick={() => navigate(action.href)}
            >
              <div className="flex items-center space-x-3 flex-1">
                <div className={`p-2 rounded-lg ${action.color} text-white`}>
                  <action.icon className="w-4 h-4" />
                </div>
                <div className="text-left">
                  <div className="font-medium">{action.title}</div>
                  <div className="text-xs opacity-80">{action.description}</div>
                </div>
              </div>
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </motion.div>
        ))}
      </CardContent>
    </Card>
  )
}
```

#### src/components/dashboard/RecentModels.tsx
```typescript
import React from 'react'
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Brain, Calendar, TrendingUp, ArrowRight } from 'lucide-react'
import type { Model } from '@/types/models'

interface RecentModelsProps {
  models: Model[]
}

export function RecentModels({ models }: RecentModelsProps) {
  const navigate = useNavigate()

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffTime = Math.abs(now.getTime() - date.getTime())
    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60))
    
    if (diffHours < 24) return `${diffHours}h ago`
    const diffDays = Math.ceil(diffHours / 24)
    if (diffDays < 7) return `${diffDays}d ago`
    return date.toLocaleDateString()
  }

  const getPerformanceScore = (model: Model) => {
    const isRegression = model.task_type === 'regression'
    const score = isRegression 
      ? model.latest_metrics?.r2_score || 0
      : model.latest_metrics?.accuracy || 0
    return (score * 100).toFixed(1)
  }

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
        <CardTitle className="flex items-center space-x-2">
          <Brain className="w-5 h-5 text-purple-500" />
          <span>Recent Models</span>
        </CardTitle>
        <Button 
          variant="outline" 
          size="sm"
          onClick={() => navigate('/models')}
        >
          View All
          <ArrowRight className="w-4 h-4 ml-1" />
        </Button>
      </CardHeader>
      <CardContent className="space-y-4">
        {models.length === 0 ? (
          <div className="text-center py-8">
            <div className="w-12 h-12 mx-auto mb-3 rounded-full bg-muted flex items-center justify-center">
              <Brain className="w-6 h-6 text-muted-foreground" />
            </div>
            <p className="text-muted-foreground mb-2">No models yet</p>
            <Button size="sm" onClick={() => navigate('/upload')}>
              Upload First Model
            </Button>
          </div>
        ) : (
          models.map((model, index) => (
            <motion.div
              key={model.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="flex items-center space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
              onClick={() => navigate(`/models/${model.id}`)}
            >
              <div className="p-2 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg text-white">
                <Brain className="w-4 h-4" />
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-2">
                  <h4 className="font-medium truncate">{model.name}</h4>
                  <Badge variant="outline" className="text-xs">
                    {model.version}
                  </Badge>
                </div>
                
                <div className="flex items-center space-x-4 mt-1">
                  <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                    <Calendar className="w-3 h-3" />
                    <span>{formatDate(model.upload_time)}</span>
                  </div>
                  
                  <Badge 
                    variant={model.task_type === 'regression' ? 'secondary' : 'default'}
                    className="text-xs"
                  >
                    {model.task_type || 'Unknown'}
                  </Badge>
                </div>
              </div>
              
              <div className="text-right">
                <div className="flex items-center space-x-1 text-sm font-medium">
                  <TrendingUp className="w-3 h-3 text-green-500" />
                  <span>{getPerformanceScore(model)}%</span>
                </div>
                <p className="text-xs text-muted-foreground">Score</p>
              </div>
            </motion.div>
          ))
        )}
      </CardContent>
    </Card>
  )
}
```

## PHASE 6: PAGES IMPLEMENTATION

### Step 6.1: Authentication Pages
#### src/pages/Login.tsx
```typescript
import React, { useState } from 'react'
import { useNavigate, useLocation, Link } from 'react-router-dom'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { motion } from 'framer-motion'
import { useAuthStore } from '@/stores/authStore'
import { LoginSchema, type LoginForm } from '@/types/auth'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Brain, Mail, Lock, Eye, EyeOff } from 'lucide-react'
import { toast } from 'sonner'

export default function Login() {
  const navigate = useNavigate()
  const location = useLocation()
  const { login } = useAuthStore()
  const [showPassword, setShowPassword] = useState(false)

  const from = location.state?.from?.pathname || '/dashboard'

  const form = useForm<LoginForm>({
    resolver: zodResolver(LoginSchema),
    defaultValues: {
      email: '',
      password: '',
    }
  })

  const onSubmit = async (data: LoginForm) => {
    try {
      await login(data)
      toast.success('Welcome back!')
      navigate(from, { replace: true })
    } catch (error) {
      // Error is already handled in the store and shown via toast
      console.error('Login error:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50 flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="w-full max-w-md"
      >
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="p-3 bg-gradient-to-br from-purple-600 to-pink-600 rounded-2xl text-white">
              <Brain className="w-8 h-8" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gradient">Welcome Back</h1>
          <p className="text-muted-foreground mt-2">
            Sign in to your ModelWhiz account
          </p>
        </div>

        <Card className="shadow-lg border-0">
          <CardHeader className="space-y-1 pb-6">
            <CardTitle className="text-2xl text-center">Sign In</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                  <Input
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    className="pl-10"
                    {...form.register('email')}
                    error={!!form.formState.errors.email}
                  />
                </div>
                {form.formState.errors.email && (
                  <p className="text-sm text-destructive">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                  <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Enter your password"
                    className="pl-10 pr-10"
                    {...form.register('password')}
                    error={!!form.formState.errors.password}
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <EyeOff className="w-4 h-4" />
                    ) : (
                      <Eye className="w-4 h-4" />
                    )}
                  </Button>
                </div>
                {form.formState.errors.password && (
                  <p className="text-sm text-destructive">
                    {form.formState.errors.password.message}
                  </p>
                )}
              </div>

              <div className="flex items-center justify-between">
                <Link
                  to="/forgot-password"
                  className="text-sm text-primary hover:underline"
                >
                  Forgot password?
                </Link>
              </div>

              <Button
                type="submit"
                className="w-full"
                loading={form.formState.isSubmitting}
                size="lg"
              >
                Sign In
              </Button>
            </form>

            <div className="mt-6 text-center">
              <p className="text-sm text-muted-foreground">
                Don't have an account?{' '}
                <Link to="/signup" className="text-primary font


